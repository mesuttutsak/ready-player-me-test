import Head from "next/head";
import Image from "next/image";
import styles from "../styles/home.module.scss";
import { useRouter } from "next/router";

import { useEffect, useRef, useState } from "react";
import dynamic from "next/dynamic";

import { useDispatch, useSelector } from "react-redux";
import Modal from "../components/Modal/Modal";
import PageContentWrapper from "../components/PageContentWrapper/PageContentWrapper";

const AvatarView = dynamic(
  async () => (await import("@sarge/avatar-view")).AvatarView,
  { ssr: false }
);

export default function Home() {
  const router = useRouter();
  const dispatch = useDispatch();
  
  const {
    avatarUrl,
    authenticatedLayoutMode
  } = useSelector((state) => state);

  const [url, setUrl] = useState(null);
  const [showModal, setShowModal] = useState(false);
  
  useEffect(() => {
    setUrl(null)
    avatarUrl !== null && setUrl(avatarUrl !== null && avatarUrl);
  }, [avatarUrl]);

  const options3DSetting = {
    followCursor: true,
    blinkEyes: true,
  };

  const options2DSetting = {
    scale: [1.4, 1.4],
    position: [0, -5],
  };

  const iframeRef = useRef(null);

  const subdomain = 'demo';  // proje
  useEffect(() =>{
    if(iframeRef.current){
      iframeRef.current.src = `https://${subdomain}.readyplayer.me/avatar?frameApi&bodyType=halfbody`;

      window.addEventListener('message', subscribe);
      document.addEventListener('message', subscribe);
    }
  }, [url])

  function subscribe(event) {
    const json = parse(event);

    if (json?.source !== 'readyplayerme') {
      return;
    }

    // Susbribe to all events sent from Ready Player Me once frame is ready
    if (json.eventName === 'v1.frame.ready' && iframeRef.current) {
      iframeRef.current.contentWindow?.postMessage(
        JSON.stringify({
          target: 'readyplayerme',
          type: 'subscribe',
          eventName: 'v1.**'
        }),
        '*'
      );
    }

    // Get avatar GLB URL
    if (json.eventName === 'v1.avatar.exported') {
      dispatch({ type: "setAvatarUrl", payload: json.data.url });
    }

    // Get user id
    if (json.eventName === 'v1.user.set') {
      console.log(`User with id ${json.data.id} set: ${JSON.stringify(json)}`);
    }
  }

  function parse(event) {
    try {
      return JSON.parse(event.data);
    } catch (error) {
      return null;
    }
  }

  function resizeScreen(event) {
    window.dispatchEvent(new Event("resize"));
  }

  useEffect(() => {
    addEventListener("transitionend", resizeScreen);
    return () => {
      removeEventListener("transitionend", resizeScreen);
    };
  }, [authenticatedLayoutMode, showModal]);
  
  const [hideAvatar, setHideAvatar] = useState(true)
  const [visiblity, setVisiblity] = useState(false)

  return (
    <div className={styles.container}>
      <Head>
        <title>Ready Player Me</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        {url !== null ? 
        <>
              { showModal && <Modal onClose={(state) => {  
                  dispatch({ type: "setAuthenticatedLayoutMode", payload: "default" });
                  setShowModal(state)
                  setTimeout(() => { setHideAvatar(false) }, 750);
              }} />
              }
              
              <PageContentWrapper>
                    <div className={styles.avartars}>
                    <div className={styles.avatar} id="mahmut">
                      <h2>3D</h2>
                      <div className={styles.avatarInner}>
                      { visiblity && !hideAvatar ? 
                        <div className={styles.loader}>
                          <img src="https://cdn.mallconomy.com/images/app/icon/spinner.png" srcSet="https://cdn.mallconomy.com/images/app/icon/spinner@2x.png" />
                        </div> :
                        <AvatarView
                          style={{
                            opacity:  visiblity && !hideAvatar ? "1" : "0",
                            width: '150px',
                            height: '150px',
                            margin: "0 1rem",
                            backgroundColor: 'trasparent'
                          }}
                          onLoaded={() => setVisiblity(true)}
                          type="3D"
                          options3d={options3DSetting}
                          url={`${url}`}
                        />
                      }
                      </div>
                    </div>
          
                    <div className={styles.avatar}>
                      <h2>2D</h2>
                      <AvatarView
                        style={{
                          opacity: url === null ? 0 : 1,
                          width: "150px",
                          height: "150px",
                          margin: "0 1rem",
                        }}
                        type="2D"
                        options2d={options2DSetting}
                        url={`${url}`}
                      />
                    </div>
                  </div>

                  <button onClick={() => router.push("/otherPage")}>
                    go to other page
                  </button>

                  <button onClick={() => {
                    dispatch({ type: "setAuthenticatedLayoutMode", payload: "fullSize" });
                    setShowModal(true)
                    setHideAvatar(true)
                    }}>
                    Open Modal
                  </button>
              </PageContentWrapper>
        </>
        : 
        <iframe style={{width: 480, height: 640}} ref={iframeRef} allow="camera *; microphone *; clipboard-write" />
        }
      </main>
    </div>
  );
}
