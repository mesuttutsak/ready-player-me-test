import Head from "next/head";
import Image from "next/image";
import styles from "../styles/home.module.scss";
import { useRouter } from "next/router";

import { useEffect, useRef, useState } from "react";
import dynamic from "next/dynamic";

import { useDispatch, useSelector } from "react-redux";
import Modal from "../components/Modal/Modal";
import PageContentWrapper from "../components/PageContentWrapper/PageContentWrapper";

const AvatarView = dynamic(
  async () => (await import("@sarge/avatar-view")).AvatarView,
  { ssr: false }
);

export default function Home() {
  const router = useRouter();
  const dispatch = useDispatch();

  const { avatarUrl, authenticatedLayoutMode } = useSelector((state) => state);

  const [url, setUrl] = useState(null);
  const [showModal, setShowModal] = useState(false);
  const [alertText, setAlertText] = useState(null);
  const [error2D, setError2D] = useState(false);
  const [error3D, setError3D] = useState(false);

  useEffect(() => {
    setUrl(null);
    setAlertText(null)
    setError2D(false)
    setError3D(false)
    avatarUrl !== null && setUrl(avatarUrl !== null && "errortext" + avatarUrl);
  }, [avatarUrl]);

  const options3DSetting = {
    followCursor: true,
    blinkEyes: true,
  };

  const options2DSetting = {
    scale: [1.4, 1.4],
    position: [0, -5],
  };

  const iframeRef = useRef(null);

  const subdomain = "demo"; // proje
  useEffect(() => {
    if (iframeRef.current) {
      iframeRef.current.src = `https://${subdomain}.readyplayer.me/avatar?frameApi&clearCache&bodyType=halfbody`;

      window.addEventListener("message", subscribe);
      document.addEventListener("message", subscribe);
    }
  }, [url]);

  function subscribe(event) {
    const json = parse(event);

    if (json?.source !== "readyplayerme") {
      return;
    }

    // Susbribe to all events sent from Ready Player Me once frame is ready
    if (json.eventName === "v1.frame.ready" && iframeRef.current) {
      iframeRef.current.contentWindow?.postMessage(
        JSON.stringify({
          target: "readyplayerme",
          type: "subscribe",
          eventName: "v1.**",
        }),
        "*"
      );
    }

    // Get avatar GLB URL
    if (json.eventName === "v1.avatar.exported") {
      dispatch({ type: "setAvatarUrl", payload: json.data.url });
    }

    // Get user id
    if (json.eventName === "v1.user.set") {
      console.log(`User with id ${json.data.id} set: ${JSON.stringify(json)}`);
    }
  }

  function parse(event) {
    try {
      return JSON.parse(event.data);
    } catch (error) {
      return null;
    }
  }

  function resizeScreen(event) {
    window.dispatchEvent(new Event("resize"));
  }

  useEffect(() => {
    addEventListener("transitionend", resizeScreen);
    return () => {
      removeEventListener("transitionend", resizeScreen);
    };
  }, [authenticatedLayoutMode, showModal]);

  const [visiblity, setVisiblity] = useState(false);

  const [showAvatarWrap, setShowAvatarWrap] = useState(true);

  return (
    <div className={styles.container}>
      <Head>
        <title>Ready Player Me</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        {url !== null ? (
          <>
            {showModal && (
              <Modal
                onClose={(state) => {
                  dispatch({
                    type: "setAuthenticatedLayoutMode",
                    payload: "default",
                  });
                  setShowModal(state);
                  setTimeout(() => {
                    setShowAvatarWrap(true);
                  }, 750);
                }}
              />
            )}

            <PageContentWrapper>
              <div className={styles.avartars}>
                <div className={styles.avatar} id="mahmut1">
                  <div
                    className={styles.avatarInner}
                    style={{ opacity: showAvatarWrap ? "1" : "0" }}
                  >
                    {false && (
                      <div className={styles.loader}>
                        <img
                          src="https://cdn.mallconomy.com/images/app/icon/spinner.png"
                          srcSet="https://cdn.mallconomy.com/images/app/icon/spinner@2x.png"
                        />
                      </div>
                    )}
                    <AvatarView
                      style={{
                        opacity: 1,
                        width: "150px",
                        height: "150px",
                        margin: "0 1rem",
                        background: "transparent",
                      }}
                      onLoaded={() => setVisiblity(true)}
                      onFailed={(e) => {
                        e?.hasError && setAlertText(e.error)
                        setError3D(true)
                      }
                      }
                      fallback={
                        <>
                          <img src="https://thumbs.dreamstime.com/b/default-avatar-profile-icon-vector-social-media-user-portrait-176256935.jpg" />
                        </>
                      }
                      type="3D"
                      options3D={options3DSetting}
                      url={`${url}`}
                    />
                  </div>
                </div>{" "}
                <div className={styles.avatar} id="mahmut2">
                  <div
                    className={styles.avatarInner}
                    style={{ opacity: showAvatarWrap ? "1" : "0" }}
                  >
                    {false && (
                      <div className={styles.loader}>
                        <img
                          src="https://cdn.mallconomy.com/images/app/icon/spinner.png"
                          srcSet="https://cdn.mallconomy.com/images/app/icon/spinner@2x.png"
                        />
                      </div>
                    )}
                    <AvatarView
                      style={{
                        opacity: 1,
                        width: "150px",
                        height: "150px",
                        margin: "0 1rem",
                        background: "transparent",
                      }}
                      onLoaded={() => setVisiblity(true)}
                      onFailed={(e) => {
                        e?.hasError && setAlertText(e.error)
                        alert("2D failed")
                      }
                      }
                      fallback={
                        <>
                          <img src="https://thumbs.dreamstime.com/b/default-avatar-profile-icon-vector-social-media-user-portrait-176256935.jpg" />
                        </>
                      }
                      type="2D"
                      options2D={options2DSetting}
                      url={`${url}`}
                    />
                  </div>
                </div>
              </div>

              {alertText !== null && <div className={styles.alert}>{alertText}</div>}

              {alertText !== null && <div className={`${styles.alert} ${styles.warning}`}>Url'in başına errortext eklenerek yanlış gönderilmesi sağlandı <i>setUrl(avatarUrl !== null && "errortext" + avatarUrl)</i></div>}

              {error2D || error3D && <div className={`${styles.alert} ${styles.warning}`}>
                {alertText !== null && <>{error2D ? '2D hatasını buldu' :  '2D hatasını bulmadı'}, {error3D ? '3D hatasını buldu' : '3D hatasını bulmadı'}  </>  }
                  </div>}
              
              <button onClick={() => router.push("/otherPage")}>
                go to other page
              </button>
              
              <button onClick={() => dispatch({ type: "setAvatarUrl", payload: null })}>
                create new avatar
              </button>

              <button
                onClick={() => {
                  dispatch({
                    type: "setAuthenticatedLayoutMode",
                    payload: "fullSize",
                  });
                  setShowModal(true);
                  setTimeout(() => {
                    setShowAvatarWrap(false);
                  }, 500);
                }}
              >
                Open Modal
              </button>
            </PageContentWrapper>
          </>
        ) : (
          <iframe
            style={{ width: 480, height: 640 }}
            ref={iframeRef}
            allow="camera *; microphone *; clipboard-write"
          />
        )}
      </main>
    </div>
  );
}
